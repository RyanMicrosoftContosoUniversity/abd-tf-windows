trigger:
  branches:
    include:
      - main

pr:
  branches:
                  $commandText = $Arguments -join ' '
                  Write-Host "Running: terraform $commandText"
                  & terraform @Arguments
      - main

variables:
  # Agent pool that hosts Terraform and Azure CLI (update to your self-hosted pool name)
  agentPoolName: 'Default'

                $initArgs = @("-chdir=$tfDir", 'init') + $backendArgs + @('-input=false')
                Invoke-Terraform -Arguments $initArgs

                Invoke-Terraform -Arguments @("-chdir=$tfDir", 'apply', '-input=false', '-auto-approve', $planPath)
  ARM_SUBSCRIPTION_ID: '910ebf13-1058-405d-b6cf-eda03e5288d1'
  terraformWorkingDirectory: 'modules/databricks-workspace'

  # Databricks workspace inputs (override via variable groups or pipeline run-time overrides as needed)
  TF_VAR_workspace_name: 'adf-tf-dev'
  TF_VAR_resource_group_name: 'adf-tf-rg'
  TF_VAR_location: 'eastus2'
  TF_VAR_workspace_sku: 'premium'
  TF_VAR_service_principal_display_name: 'adb-tf-dev-spn'
  TF_VAR_service_principal_secret_name: 'adb-tf-dev-spn-secret'
  TF_VAR_key_vault_id: '/subscriptions/910ebf13-1058-405d-b6cf-eda03e5288d1/resourceGroups/fabric-rg/providers/Microsoft.KeyVault/vaults/kvfabricprodeus2rh'

  # Optional remote state backend (set these when you have a storage account/container ready)
  backend_storage_account_name: ''
  backend_resource_group_name: ''
  backend_container_name: ''
  backend_state_key: ''

stages:
- stage: Validate
  displayName: Terraform Validate & Plan
  jobs:
  - job: Plan
    displayName: Run terraform fmt/validate/plan
    pool:
      name: $(agentPoolName)
    steps:
    - checkout: self
      clean: true


    - task: PowerShell@2
      name: DependenciesCheck
      displayName: Dependencies Check
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "PROCESS PATH:"
              $env:Path -split ';' | ForEach-Object { " - $_" }
              Write-Host "`nResolve az/pwsh:"
              $az = Get-Command az -ErrorAction SilentlyContinue
              $pw = Get-Command pwsh -ErrorAction SilentlyContinue
              if ($az) { "az => $($az.Source)" } else { "az NOT FOUND" }
              if ($pw) { "pwsh => $($pw.Source)" } else { "pwsh NOT FOUND" }
    - task: AzureCLI@2
      name: TerraformPlan
      displayName: Terraform init/validate/plan
      inputs:
        azureSubscription: 'fabric-sc'
        addSpnToEnvironment: true
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Export pipeline variables to environment for Terraform
          $env:TF_VAR_workspace_name                 = "$(TF_VAR_workspace_name)"
          $env:TF_VAR_resource_group_name            = "$(TF_VAR_resource_group_name)"
          $env:TF_VAR_location                       = "$(TF_VAR_location)"
          $env:TF_VAR_workspace_sku                  = "$(TF_VAR_workspace_sku)"
          $env:TF_VAR_service_principal_display_name = "$(TF_VAR_service_principal_display_name)"
          $env:TF_VAR_service_principal_secret_name  = "$(TF_VAR_service_principal_secret_name)"
          $env:TF_VAR_key_vault_id                   = "$(TF_VAR_key_vault_id)"

          $ErrorActionPreference = 'Stop'

          # Resolve absolute TF working directory under the repo root
          $repoRoot = "$(System.DefaultWorkingDirectory)"
          $tfDir = Join-Path $repoRoot "$(terraformWorkingDirectory)"

          Write-Host "Repo root: $repoRoot"
          Write-Host "Terraform dir: $tfDir"
          if (-not (Test-Path $tfDir)) {
            throw "Terraform directory not found: $tfDir"
          }

          if (-not (Get-Command terraform -ErrorAction SilentlyContinue)) {
            throw 'Terraform CLI not found on PATH. Install it on the self-hosted agent or run a setup step first.'
          }

          function Invoke-Terraform {
            param(
              [Parameter(Mandatory = $true, Position = 0)]
              [string[]]$Arguments
            )

            $commandText = $Arguments -join ' '
            Write-Host "Running: terraform $commandText"
            & terraform @Arguments
            $exit = $LASTEXITCODE
            if ($exit -ne 0) {
              $message = "Terraform command failed with exit code {0}: terraform {1}" -f $exit, $commandText
              throw $message
            }
          }

          # Map AzureCLI service principal env to Terraform azurerm provider
          $env:ARM_CLIENT_ID     = $env:servicePrincipalId
          $env:ARM_CLIENT_SECRET = $env:servicePrincipalKey
          $env:ARM_TENANT_ID     = $env:tenantId
          $env:ARM_SUBSCRIPTION_ID = '$(ARM_SUBSCRIPTION_ID)'

          Write-Host "TF_VAR_workspace_name: $($env:TF_VAR_workspace_name)"
          Write-Host "TF_VAR_service_principal_display_name: $($env:TF_VAR_service_principal_display_name)"
          Write-Host "TF_VAR_service_principal_secret_name: $($env:TF_VAR_service_principal_secret_name)"
          Write-Host "TF_VAR_key_vault_id: $($env:TF_VAR_key_vault_id)"

          $backendArgs = @()
          if (![string]::IsNullOrWhiteSpace("$(backend_storage_account_name)")) {
            if ([string]::IsNullOrWhiteSpace("$(backend_resource_group_name)") -or [string]::IsNullOrWhiteSpace("$(backend_container_name)") -or [string]::IsNullOrWhiteSpace("$(backend_state_key)")) {
              throw 'backend_resource_group_name, backend_container_name, and backend_state_key must be provided when backend_storage_account_name is set.'
            }
            $backendArgs += "-backend-config=storage_account_name=$(backend_storage_account_name)"
            $backendArgs += "-backend-config=resource_group_name=$(backend_resource_group_name)"
            $backendArgs += "-backend-config=container_name=$(backend_container_name)"
            $backendArgs += "-backend-config=key=$(backend_state_key)"
          }

          # IMPORTANT: quote -chdir so $tfDir expands
          $initArgs = @("-chdir=$tfDir", 'init') + $backendArgs + @('-input=false')
          Invoke-Terraform -Arguments $initArgs

          Invoke-Terraform -Arguments @("-chdir=$tfDir", 'fmt', '-check')

          Write-Host "DEBUG: TF_VAR_location = $env:TF_VAR_location"
          Write-Host "DEBUG: TF_VAR_workspace_sku = $env:TF_VAR_workspace_sku"

          Invoke-Terraform -Arguments @("-chdir=$tfDir", 'validate')

          Invoke-Terraform -Arguments @("-chdir=$tfDir", 'plan', '-out=tfplan', '-input=false')

          # Persist the plan for later application
          $planDirectory = "$(Pipeline.Workspace)/terraform-plan"
          New-Item -ItemType Directory -Path $planDirectory -Force | Out-Null
          $planSource = Join-Path $tfDir 'tfplan'
          if (Test-Path $planSource) {
            Copy-Item -Path $planSource -Destination $planDirectory -Force
          } else {
            throw "Terraform plan output not found at $planSource. terraform plan likely failed."
          }


    - publish: "$(Pipeline.Workspace)/terraform-plan"
      artifact: tfplan
      displayName: Publish tfplan artifact

- stage: Deploy
  displayName: Terraform Apply
  dependsOn: Validate
  condition: succeeded('Validate')
  jobs:
  - deployment: Apply
    displayName: terraform apply (manual approval recommended)
    environment: databricks-workspace
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true

          - download: current
            artifact: tfplan

          - task: AzureCLI@2
            displayName: Terraform init/apply
            inputs:
              azureSubscription: 'fabric-sc'
              addSpnToEnvironment: true
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference = 'Stop'
                $repoRoot = "$(System.DefaultWorkingDirectory)"
                $tfDir = Join-Path $repoRoot "$(terraformWorkingDirectory)"
                $planPath = Join-Path "$(Pipeline.Workspace)/tfplan" 'tfplan'

                if (-not (Get-Command terraform -ErrorAction SilentlyContinue)) {
                  throw 'Terraform CLI not found on PATH. Install it on the self-hosted agent or invoke tf-setup/tf-setup.ps1 beforehand.'
                }

                function Invoke-Terraform {
                  param(
                    [Parameter(Mandatory = $true, Position = 0)]
                    [string[]]$Arguments
                  )

                  $commandText = $Arguments -join ' '
                  Write-Host "Running: terraform $commandText"
                  & terraform @Arguments
                  $exit = $LASTEXITCODE
                  if ($exit -ne 0) {
                    $message = "Terraform command failed with exit code {0}: terraform {1}" -f $exit, $commandText
                    throw $message
                  }
                }

                if (-not (Test-Path $planPath)) {
                  throw "Terraform plan not found at $planPath"
                }

                $env:ARM_CLIENT_ID = $env:servicePrincipalId
                $env:ARM_CLIENT_SECRET = $env:servicePrincipalKey
                $env:ARM_TENANT_ID = $env:tenantId
                $env:ARM_SUBSCRIPTION_ID = '$(ARM_SUBSCRIPTION_ID)'

                $backendArgs = @()
                if (![string]::IsNullOrWhiteSpace("$(backend_storage_account_name)")) {
                  if ([string]::IsNullOrWhiteSpace("$(backend_resource_group_name)") -or [string]::IsNullOrWhiteSpace("$(backend_container_name)") -or [string]::IsNullOrWhiteSpace("$(backend_state_key)")) {
                    throw 'backend_resource_group_name, backend_container_name, and backend_state_key must be provided when backend_storage_account_name is set.'
                  }

                  $backendArgs += "-backend-config=storage_account_name=$(backend_storage_account_name)"
                  $backendArgs += "-backend-config=resource_group_name=$(backend_resource_group_name)"
                  $backendArgs += "-backend-config=container_name=$(backend_container_name)"
                  $backendArgs += "-backend-config=key=$(backend_state_key)"
                }

                $initArgs = @("-chdir=$tfDir", 'init') + $backendArgs + @('-input=false')
                Invoke-Terraform -Arguments $initArgs

                Invoke-Terraform -Arguments @("-chdir=$tfDir", 'apply', '-input=false', '-auto-approve', $planPath)
